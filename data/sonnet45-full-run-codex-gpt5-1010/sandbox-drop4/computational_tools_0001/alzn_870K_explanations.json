{
    "snippets": [
        {
            "code": "#!/usr/bin/env python3\n\"\"\"\nCALPHAD equilibrium calculation for Al–Zn at 870 K, X(AL)=0.20 (at.%).\n\nWorkflow:\n- Load COST507 database from TnETDBDB\n- Select relevant phases from DB (containing AL/ZN)\n- Solve equilibrium at T=870 K, P=1 atm, N=1 mol, X(AL)=0.20\n- Compute phase fractions from NP, threshold for stability at 1e-3\n- Emit results.json and results.csv\n- Print concise human-readable summary\n\nNotes:\n- Follows the one-script, single-run guidance.\n- Uses pycalphad to introspect the database; no grepping TDB files.\n\"\"\"\n",
            "explanation": "This block provides a script header and comments on the purpose and workflow of the script, explaining the equilibrium calculations for an Al–Zn system using the CALPHAD method.",
            "materials_parameters": []
        },
        {
            "code": "import json\nimport os\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\n\ntry:\n    from dotenv import load_dotenv  # for MP API if needed; not used here\nexcept Exception:\n    load_dotenv = None\n\nfrom pycalphad import Database, equilibrium, variables as v\n",
            "explanation": "Imports necessary libraries for data management, file handling, and CALPHAD methodology calculations. The `pycalphad` library is essential for thermodynamic computations.",
            "materials_parameters": []
        },
        {
            "code": "def phase_has_any(dbf: Database, phase: str, comps):\n    const = dbf.phases[phase].constituents\n    flat = {c for subl in const for c in subl}\n    # Map Species objects to their element names (e.g., 'AL', 'ZN')\n    elems = {getattr(c, 'name', str(c)) for c in flat}\n    return bool(set(comps) & elems)\n",
            "explanation": "Defines a helper function that checks if a given phase contains specific components (elements like AL or ZN) in a thermodynamic database.",
            "materials_parameters": []
        },
        {
            "code": "def main():\n    # Load .env if present (e.g., for MP_API_KEY); no external queries here\n    if load_dotenv is not None:\n        env_path = Path('.env')\n        if env_path.exists():\n            load_dotenv(env_path)\n",
            "explanation": "Begins the `main` function, optionally loading environmental variables if a `.env` file is present. Used for extended configurations, though not needed here.",
            "materials_parameters": []
        },
        {
            "code": "    # Database path (COST507, under TnETDBDB). Read-only.\n    db_path = Path('/Users/delip/play/miniclaimspy/TnETDBDB/cost507R.TDB')\n    if not db_path.exists():\n        raise FileNotFoundError(f\"TDB database not found: {db_path}\")\n\n    dbf = Database(str(db_path))\n",
            "explanation": "Specifies and verifies the path to the thermodynamic database file (COST507), ensuring it exists for subsequent equilibrium calculations.",
            "materials_parameters": []
        },
        {
            "code": "    # Components: include VA if present in DB\n    target_comps = ['AL', 'ZN', 'VA']\n    comps = [c for c in target_comps if c in dbf.elements]\n    if ('AL' not in comps) or ('ZN' not in comps):\n        raise ValueError(f\"Database does not include required elements AL/ZN; has {sorted(dbf.elements)}\")\n",
            "explanation": "Defines the components of interest for the equilibrium calculation, namely aluminum (AL), zinc (ZN), and potentially vacancies (VA). Validates their presence in the database.",
            "materials_parameters": []
        },
        {
            "code": "    # Phases containing AL or ZN; sorted for reproducibility\n    phases = sorted([p for p in dbf.phases.keys() if phase_has_any(dbf, p, ['AL', 'ZN'])])\n    assert phases, \"No phases selected; did you build the phases list?\"\n",
            "explanation": "Identifies and sorts phases from the database that contain aluminum or zinc, ensuring at least one phase is selected for calculations.",
            "materials_parameters": []
        },
        {
            "code": "    # Conditions: N-1 mole fraction constraints for a binary system\n    # Temperature in Kelvin, pressure in Pa\n    T = 870.0\n    P = 101325.0\n    X_AL = 0.20  # 20 at.% Al => 80 at.% Zn\n    conds = {v.T: T, v.P: P, v.N: 1.0, v.X('AL'): X_AL}\n",
            "explanation": "Sets up the thermodynamic conditions for the equilibrium. Temperature (T=870 K), Pressure (P=1 atm), Total moles (N=1), and composition (X(AL)=0.20).",
            "materials_parameters": [
                {
                    "name": "T",
                    "value": "870.0",
                    "units": "Kelvin",
                    "meaning": "Temperature of the equilibrium calculation.",
                    "typical_range": "298-2000 K"
                },
                {
                    "name": "P",
                    "value": "101325.0",
                    "units": "Pascal",
                    "meaning": "Pressure at which the calculation is conducted, typically 1 atm.",
                    "typical_range": "0.01-100 MPa"
                },
                {
                    "name": "X_AL",
                    "value": "0.20",
                    "units": "Mole Fraction",
                    "meaning": "Mole fraction of aluminum in the Al-Zn mixture.",
                    "typical_range": "0-1"
                }
            ]
        },
        {
            "code": "    # (Guard omitted; composition constraints are set explicitly above.)\n\n    # Solve equilibrium\n    eq = equilibrium(dbf, comps, phases, conds, output='NP')\n",
            "explanation": "Performs the equilibrium calculation using the `pycalphad` library, outputting the number of moles (NP) for each phase at the specified conditions.",
            "materials_parameters": []
        },
        {
            "code": "    # Compute phase fractions from vertex labeling in this pycalphad version.\n    # For each vertex, look up phase name and moles NP; accumulate per phase.\n    np_da = eq['NP']  # dims: (N, P, T, X_AL, vertex)\n    ph_da = eq['Phase']  # dims: (N, P, T, X_AL, vertex)\n\n    # Extract along the single condition point (N,P,T,X_AL all len=1)\n    np_vals = np_da.values.reshape(-1)\n    ph_vals = ph_da.values.reshape(-1)\n",
            "explanation": "Extracts and reshapes equilibrium results to determine the phase fractions by examining the moles (NP) associated with each phase at the calculated equilibrium.",
            "materials_parameters": []
        },
        {
            "code": "    phase_moles = {}\n    for ph_label, np_mol in zip(ph_vals, np_vals):\n        ph_name = str(ph_label).strip()\n        if not ph_name:\n            continue\n        phase_moles[ph_name] = phase_moles.get(ph_name, 0.0) + float(np_mol)\n",
            "explanation": "Aggregates mole quantities for each phase, constructing a dictionary that totals moles of each phase present in the system.",
            "materials_parameters": []
        },
        {
            "code": "    tot_moles = sum(phase_moles.values())\n    if tot_moles <= 0:\n        raise RuntimeError(\"Total phase moles computed as zero or negative; check equilibrium result.\")\n\n    results = [{'phase': ph, 'fraction': m / tot_moles} for ph, m in phase_moles.items()]\n",
            "explanation": "Calculates total moles and verifies results, then computes and stores the phase fraction for each phase by normalizing their moles against the total.",
            "materials_parameters": []
        },
        {
            "code": "    # Stability threshold per guidance\n    stable = [r for r in results if r['fraction'] > 1e-3]\n    stable_sorted = sorted(stable, key=lambda r: r['fraction'], reverse=True)\n",
            "explanation": "Filters out phases with negligible fractions (below threshold 1e-3) and sorts the remaining stable phases by their fraction in descending order for reporting.",
            "materials_parameters": []
        },
        {
            "code": "    # Identify liquid if present\n    liquid_frac = 0.0\n    for r in results:\n        if r['phase'].upper().startswith('LIQUID'):\n            liquid_frac = r['fraction']\n            break\n",
            "explanation": "Detects if a liquid phase is present by checking phase names and capturing its fraction, aiding in understanding the material state at equilibrium.",
            "materials_parameters": []
        },
        {
            "code": "    # Write outputs\n    out_json = Path('alzn_870K_results.json')\n    out_csv = Path('alzn_870K_results.csv')\n\n    payload = {\n        'database': str(db_path),\n        'components': comps,\n        'phases_considered': phases,\n        'conditions': {'T_K': T, 'P_Pa': P, 'X_AL': X_AL, 'N_mol': 1.0},\n        'phase_fractions': results,\n        'stable_phases_threshold_1e-3': stable_sorted,\n        'liquid_present': liquid_frac > 1e-6,\n        'liquid_fraction': liquid_frac,\n    }\n    with out_json.open('w') as f:\n        json.dump(payload, f, indent=2)\n",
            "explanation": "Outputs the equilibrium calculation results to a JSON file, providing details on components, conditions, and phase fractions, including notes on phase stability and liquid presence.",
            "materials_parameters": []
        },
        {
            "code": "    # CSV of all phases; write stable flag\n    df = pd.DataFrame(results)\n    df['stable_gt_1e-3'] = df['fraction'] > 1e-3\n    df.to_csv(out_csv, index=False)\n",
            "explanation": "Creates a DataFrame from results and exports it as a CSV file, adding a column indicating phase stability relative to the threshold for ease of data interpretation.",
            "materials_parameters": []
        },
        {
            "code": "    # Human-readable summary\n    print(\"Al–Zn CALPHAD @ 870 K, X(AL)=0.20 (P=1 atm)\")\n    print(f\"Database: {db_path}\")\n    if stable_sorted:\n        print(\"Stable phases (fraction, >1e-3):\")\n        for r in stable_sorted:\n            print(f\"  - {r['phase']}: {r['fraction']:.6f}\")\n    else:\n        print(\"No phases exceed the 1e-3 fraction threshold; showing top contributors:\")\n        top = sorted(results, key=lambda r: r['fraction'], reverse=True)[:5]\n        for r in top:\n            print(f\"  - {r['phase']}: {r['fraction']:.6f}\")\n\n    state = \"Liquid present\" if (liquid_frac > 1e-6) else \"All solid\"\n    print(f\"State assessment: {state} (LIQUID fraction = {liquid_frac:.6f})\")\n",
            "explanation": "Prints a detailed human-readable summary of the equilibrium results, including stable phases and their fractions, and assesses the state of the system.",
            "materials_parameters": []
        },
        {
            "code": "\n\nif __name__ == '__main__':\n    main()\n",
            "explanation": "Standard Python script execution entry. Calls the `main` function to execute the script as it is run.",
            "materials_parameters": []
        }
    ],
    "summary": "The provided Python script performs a CALPHAD method-based equilibrium calculation for an aluminum-zinc system using the pycalphad library. It specifies thermodynamic conditions, solves for stable phases, and outputs the results to JSON and CSV formats. A concise summary is printed for user review, detailing phases present, their fractions, and whether a liquid phase exists."
}